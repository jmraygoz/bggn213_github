---
title: "Class 13: RNASeq with DESeq2"
author: "Jessica PID: A15647602"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: inline
---

Today we will work with some bulk RNASeq data from Himes et al. where airway smooth muscle (asm) cells were treated with dexamethasone (dex), a synthetic glucocorticoid steroid with anti-inflammatory effects.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

```

```{r}
#head(counts)
```
> Q1. How many transcripts/ genes are in the `counts` object?

```{r}
nrow(counts)
```
 
> Q2. How many "control" samples are there?

```{r}
sum(metadata$dex == "control")
```

```{r}
table(metadata$dex)
```

I want to compare "control" vs. "treated" 

1. Let's split the `counts` into `control.counts` and `treated.counts`

```{r}
metadata$dex == "control"
metadata$id == colnames(counts)
```

```{r}
control.inds <- metadata$dex == "control"
```

Syntax with df[ROWS, COLs]

```{r}
control.counts <- counts[ , control.inds]
#control.counts
```

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ , treated.inds]
#treated.counts
```

2. Let's find the mean count per gene for "control" and "treated" - then we can compare these :). Let's call it `control.mean` and `treated.mean`.

I can use the `apply()` function to apply `mean()` over the rows or columns of any data frame. 

```{r}
control.mean <- apply(control.counts, 1, mean) 
treated.mean <- apply(treated.counts, 1, mean)
```

Put these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts)

```
```{r}
library(ggplot2)
ggplot(meancounts,  aes(x = control.mean, y= treated.mean)) + geom_point()
```


```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts, log = "xy")
```



```{r}
log2(40/10)

```

Let's calculate the log2 fold change and add it to our table `mean.counts`
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```
FILTER OUT ALL GENES WITH ZERO COUNTS IN EITHER CONTROL OR TREATED
```{r}
to.rm <- rowSums(meancounts[,1:2] == 0) > 0 
mycounts <- meancounts[!to.rm, ]
```

```{r}
nrow(mycounts)
```

>Q. How many "down" regulated genes do we have at the common log2 fold change value of -2...


```{r}
sum(mycounts$log2fc < -2)
```

>Q. How many "up" at log2FC > +2

```{r}
sum(mycounts$log2fc > 2)
```

We are missing the stats!
##DESeq Analysis
```{r}
#| message: false
library(DESeq2)
```

DESeq, like many BioConductor packages, wants our input data in a very specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

The main function in DESeq2 is called `DESeq()`

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

Figure volcano plot for logFC vs. P-value

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(-2,2), col = "gray")
abline(h=-log(0.005), col = "gray")

```

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2] <- "darkgreen"
mycols[res$log2FoldChange < -2] <- "red"
mycols[res$padj > 0.005] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col = mycols)
abline(v=c(-2,2), col = "gray")
abline(h=-log(0.005), col = "gray")
```

```{r}
write.csv(res, file = "myresults.csv")
```

## Gene Annotation

```{r}
head(res)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db) 
```

```{r}
res$symbols <- mapIds(org.Hs.eg.db, 
                      keys = row.names(res),
                      keytype = "ENSEMBL",
                      column = "SYMBOL",
                      multiVals = "first")
```

```{r}
head(res)
```

##Pathway Analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

```

```{r}
head(kegg.sets.hs, 2)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db, 
                      keys = row.names(res),
                      keytype = "ENSEMBL",
                      column = "ENTREZID",
                      multiVals = "first")
```

I can use **gage** to overlap with known KEGG pathways.

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![A pathway figure](hsa05310.pathview.png)

