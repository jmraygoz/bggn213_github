---
title: "Class 14: RNASeq Mini Project"
author: "Jessica PID: A15647602"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: inline
---
## Import Data

We need two things "Counts" and  "Metadata"(what DESeq calls colData - as it describes the column in Counts)

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
metadata <- read.csv("GSE37704_metadata.csv")
```

Peak:

```{r}
head(counts)
```

```{r}
head(metadata)
```

We want the columns in `counts` to match the rows in the `metadata`

```{r}
colnames(counts)
metadata$id
```

We can get rid of the first column in `counts` to make these match

```{r}
countData <- counts[,-1]
```

```{r}
colnames(countData)
metadata$id
```
```{r}
all( colnames(countData) == metadata$id)

```

## Data Cleanup
## Filter out zero counts

It is standard practice to remove any genes/transcipts that we have no data for -i.e. zero counts in all columns

```{r}
to.keep.inds <- rowSums(countData) > 0
cleanCounts <- countData[to.keep.inds,]
head(cleanCounts)
```

## Setup for DESup

```{r}
#| message: false

library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleanCounts, 
                       colData = metadata,
                       design = ~condition)
```
## DESeq

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

## Inspect Results

```{r}
head(res)
```

## Data Visualization

```{r}
library(ggplot2)

plot(res$log2FoldChange, -log(res$padj))

ggplot(res, aes(x = log2FoldChange, y = -log(padj))) + geom_point() + xlim(-10, 10) + ylim(0, 1000)
```


## Annotation of genes

First I need to translate my Ensemble IDs in my `res` object to Entrez and gene symbol formats.

For this i will use the AnnotationDbi package and it's `mapIds()` function.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
columns(org.Hs.eg.db)
```

Let's map to "SYMBOL", "ENTREZID", "GENENAME"

```{r}
res$genename <- mapIds(org.Hs.eg.db, 
                        keys = rownames(res), 
                        keytype = "ENSEMBL",
                        column = "GENENAME")

res$symbol <- mapIds(org.Hs.eg.db, 
                        keys = rownames(res), 
                        keytype = "ENSEMBL",
                        column = "SYMBOL")

res$entrez <- mapIds(org.Hs.eg.db, 
                        keys = rownames(res), 
                        keytype = "ENSEMBL",
                        column = "ENTREZID")
head(res)
```

Before going any further lets focus in on a subset of "top" hits.

We can use as a starting point log2FC of +2/-2 and a adjusted p-value of less than 0.05.

```{r}
top.inds <- (abs(res$log2FoldChange) > 2) & (res$padj < 0.05)
top.inds[is.na(top.inds)] <- FALSE
```

Let's save our "top genes" as a CSV file.

```{r}
top.genes <- res[top.inds,]
write.csv(top.genes, file = "top_geneset.csv")
```

Now we can do some pathway analysis 

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)
```

```{r}
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
```

The **gage** function wants a vector of importance as input with gene names as labels - KEGG speaks ENTREZ

```{r}
foldchanges <- res$log2FoldChange 
names(foldchanges) <- res$entrez
head(foldchanges)
```

Run gage with these values

```{r}
keggres <- gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

hsa04110

```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```

![A pathway figure](hsa04110.pathview.png)

```{r}
data("go.sets.hs")
data("go.subs.hs")

gobpsets = go.sets.hs[go.subs.hs$BP]

gores <- gage(foldchanges, gsets = gobpsets)
```

```{r}
head(gores$less)
```

To run reactome online we need to make a little text file with a gene id per line. 

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", 
            row.names=FALSE, 
            col.names=FALSE, 
            quote=FALSE)
```

![](R-HSA-68886.png)

