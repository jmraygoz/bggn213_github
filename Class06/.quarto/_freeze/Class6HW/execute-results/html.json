{
  "hash": "4a9f5ededb1b1a2a4ee19aa27e3d33cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class06-HW\"\nauthor: Jessica A15647602\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Can you improve this analysis code?\n\nlibrary(bio3d)\ns1 <- read.pdb(\"4AKE\")  # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n```{.r .cell-code}\ns2 <- read.pdb(\"1AKE\")  # kinase no drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ns3 <- read.pdb(\"1E4Y\")  # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n```{.r .cell-code}\ns1.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\ns2.chainA <- trim.pdb(s2, chain=\"A\", elety=\"CA\")\ns3.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\ns1.b <- s1.chainA$atom$b\ns2.b <- s2.chainA$atom$b\ns3.b <- s3.chainA$atom$b\nplotb3(s1.b, sse=s1.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplotb3(s2.b, sse=s2.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplotb3(s3.b, sse=s3.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bio3d) #This will provide the read.pdb file\n\nAnalyse_protein <- function(Protein){\n  \n  s1 <- read.pdb(Protein) #This is to access the online pdb file\n  s1.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\") #Trim and filter the data to retrieve specific data from chain A and elety CA\n  s1.b <- s1.chainA$atom$b #Selecting the data from the previously filtered chain A and only elety CA, then selecting the atom's b values \n  plotb3(s1.b, sse=s1.chainA, typ=\"l\", ylab=\"Bfactor\")  #plot the \n  return() \n  \n   }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAnalyse_protein(\"1E4Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in get.pdb(file, path = tempdir(), verbose = FALSE):\n/var/folders/n9/p7kz9c9s4dg0dqlk47c9nzx40000gn/T//RtmpEUTANs/1E4Y.pdb exists.\nSkipping download\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\n#This allows for you to add a Protein PDB file to generate a plot that contains the \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAnalyse_protein(\"4AKE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in get.pdb(file, path = tempdir(), verbose = FALSE):\n/var/folders/n9/p7kz9c9s4dg0dqlk47c9nzx40000gn/T//RtmpEUTANs/4AKE.pdb exists.\nSkipping download\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAnalyse_protein(\"1AKE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in get.pdb(file, path = tempdir(), verbose = FALSE):\n/var/folders/n9/p7kz9c9s4dg0dqlk47c9nzx40000gn/T//RtmpEUTANs/1AKE.pdb exists.\nSkipping download\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Class6HW_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Class6HW_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}